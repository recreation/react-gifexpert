{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","console","log","type","value","onChange","target","getGifs","category","a","urlFinal","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"0MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACQ,uBAAMC,SAbO,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IAEzBR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,IACdO,QAAQC,IAAI,MAKZ,UACI,6BAAKT,IACL,uBAAOU,KAAK,OAAOC,MAAOX,EAAYY,SAnBxB,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,c,sCCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FACkFC,UAAUH,GAD5F,sBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAIFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAZvB,kBAiBZL,GAjBY,4CAAH,sDCAPQ,EAAc,SAAC,GAAmB,IAAjBJ,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,IAGhC,OAFApB,QAAQC,IAAI,WACZD,QAAQC,IAAI,MAAMkB,EAAMC,GAEpB,sBAAKI,UAAU,6CAAf,UACG,qBAAKC,IAAKL,EAAMM,IAAKP,IACrB,kCAAMA,EAAN,WCFEQ,EAAU,SAAC,GAAoB,IAAjBpB,EAAgB,EAAhBA,SAkBvB,ECrBwB,SAAEA,GAE1B,MAA0BhB,mBAAS,CAC/BuB,KAAK,GACLc,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KA6BA,OAxBAC,qBAAW,WAGPzB,EAASC,GACRyB,MAAM,SAAAC,GAECH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAOrB,CAACrB,IASGsB,EDVwBK,CAAa3B,GAAhCc,EAAZ,EAAOP,KAAac,EAApB,EAAoBA,QAMpB,OACI,eAAC,WAAD,WACA,qBAAIJ,UAAU,wCAAd,cAAwDjB,EAAxD,OACEqB,EAAU,cAAgB,eAC5B,qBAAKJ,UAAU,YAAf,SAaYH,EAAOL,KAAK,SAAAC,GAAG,OAGX,aAFA,CAEC,EAAD,eAAgCA,GAAbA,EAAIC,aEbhCiB,EAjCM,WAEjB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAMA,OACI,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAIA,6BAEIS,EAAWiB,KAAK,SAACT,GACb,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCjBzC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.10d6f264.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e) =>{\r\n        //console.log(e.target.value)\r\n        setinputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        //setCategories();\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length>1){\r\n\r\n            setCategories( categories => [ inputValue, ...categories ] );\r\n            setinputValue('');\r\n            console.log(12);\r\n        }\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={ handleSubmit }>\r\n                <h1>{inputValue}</h1>\r\n                <input type=\"text\" value={inputValue} onChange={ handleInputChange }></input>\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const urlFinal = `http://api.giphy.com/v1/gifs/search?api_key=h3EhWWII5vCdpTZq7dRXa0y5DVKVipfU&q= ${ encodeURI(category) } limit=10`;\r\n    const resp = await fetch (urlFinal);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    //console.log(\"data\", data);\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    //console.log(\"gifs\", gifs);\r\n    return gifs;\r\n\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url} ) => {\r\n    console.log(123123123);\r\n    console.log(\"asd\",title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n           <img src={url}  alt={title} />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Fragment } from 'react/cjs/react.production.min';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n    // const [count, setCount] = useState(0);\r\n\r\n    //  const [images, setImages] = useState([]);\r\n\r\n    //  useEffect( ()=>{\r\n    //      getGifs(  category  ).then(\r\n    //          imgs => setImages( imgs )\r\n    //      )\r\n    //  }, [ category ]); //no se dispara de nuevo el getGifs\r\n\r\n    // const apiKey = 'h3EhWWII5vCdpTZq7dRXa0y5DVKVipfU';\r\n\r\n    // const url = 'http://api.giphy.com/v1/gifs/search?api_key=';\r\n    // const url2 = '&q=programacion&limit=10';\r\n\r\n    // let gifs=[];\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    // console.log(images, loading);\r\n\r\n    //getGifs();    \r\n\r\n    return (\r\n        <Fragment>\r\n        <h3 className=\"animate__animated animate__fadeInDown\"> {category} </h3>\r\n        { loading ? 'Cargando...' : 'Data cargada'}\r\n        <div className=\"card-grid\">\r\n            \r\n            {/* {\r\n                <h3> {count} </h3>\r\n                <button onClick={ ()=> setCount(count + 1) }>Add</button>  \r\n                } */}\r\n\r\n            \r\n                {\r\n                    // images.map(img => (\r\n                    //     <li key={ img.id }> { img.title } </li>\r\n                    // ))\r\n                    \r\n                    images.map( img => (\r\n                        // <li key={ id }> { title } </li>\r\n                        \r\n                        <GifGridItem  key={img.id} { ...img }></GifGridItem>\r\n\r\n                    ))\r\n                } \r\n            \r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n       \r\n\r\n        getGifs( category )\r\n        .then( imgs=>{\r\n           \r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n\r\n        } )\r\n        \r\n        \r\n\r\n    }, [category]); //no se dispara de nuevo el getGifs\r\n\r\n    // setTimeout( ()=>{\r\n    //     setstate({\r\n    //         data:[1,2,3,4,5],\r\n    //         loading:false\r\n    //     })\r\n    // }, 3000)\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Overwatch'])\r\n    //const categories= ['One Punch', 'Dragon Ball', 'Otro'];\r\n    // const handleApp = () =>{\r\n    //     setCategories( [...categories, 'Hunter'] );        \r\n    // }\r\n\r\n    return (   \r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n\r\n            <AddCategory setCategories={ setCategories }></AddCategory>\r\n\r\n            <hr/>\r\n\r\n            {/* <button className=\"btn\" onClick={handleApp}>Agregar</button> */}\r\n\r\n            <ol>\r\n            {\r\n                categories.map( (category) => {\r\n                    return <GifGrid key={category} category={category}></GifGrid>\r\n                    //return <li key={category}>{category}</li>\r\n                })\r\n            }\r\n            </ol>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\n\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}